// Code generated by go-enum DO NOT EDIT.

package smartpvms

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

const (
	// DeviceTypeStringInverter is a DeviceType of type StringInverter.
	DeviceTypeStringInverter DeviceType = iota + 1
	// DeviceTypeSmartLogger is a DeviceType of type SmartLogger.
	DeviceTypeSmartLogger
	// DeviceTypeTransformer is a DeviceType of type Transformer.
	DeviceTypeTransformer DeviceType = iota + 6
	// DeviceTypeEMI is a DeviceType of type EMI.
	DeviceTypeEMI DeviceType = iota + 7
	// DeviceTypeProtocolConverter is a DeviceType of type ProtocolConverter.
	DeviceTypeProtocolConverter DeviceType = iota + 9
	// DeviceTypeGeneralDevice is a DeviceType of type GeneralDevice.
	DeviceTypeGeneralDevice DeviceType = iota + 11
	// DeviceTypeGridMeter is a DeviceType of type GridMeter.
	DeviceTypeGridMeter
	// DeviceTypePID is a DeviceType of type PID.
	DeviceTypePID DeviceType = iota + 15
	// DeviceTypePinnetDataLogger is a DeviceType of type PinnetDataLogger.
	DeviceTypePinnetDataLogger DeviceType = iota + 29
	// DeviceTypeResidentialInverter is a DeviceType of type ResidentialInverter.
	DeviceTypeResidentialInverter
	// DeviceTypeBattery is a DeviceType of type Battery.
	DeviceTypeBattery
	// DeviceTypeBackupBox is a DeviceType of type BackupBox.
	DeviceTypeBackupBox
	// DeviceTypePLC is a DeviceType of type PLC.
	DeviceTypePLC DeviceType = iota + 33
	// DeviceTypeOptimizer is a DeviceType of type Optimizer.
	DeviceTypeOptimizer
	// DeviceTypePowerSensor is a DeviceType of type PowerSensor.
	DeviceTypePowerSensor
	// DeviceTypeDongle is a DeviceType of type Dongle.
	DeviceTypeDongle DeviceType = iota + 47
	// DeviceTypeDistributedSmartLogger is a DeviceType of type DistributedSmartLogger.
	DeviceTypeDistributedSmartLogger
	// DeviceTypeSafetyBox is a DeviceType of type SafetyBox.
	DeviceTypeSafetyBox DeviceType = iota + 53
)

const _DeviceTypeName = "StringInverterSmartLoggerTransformerEMIProtocolConverterGeneralDeviceGridMeterPIDPinnetDataLoggerResidentialInverterBatteryBackupBoxPLCOptimizerPowerSensorDongleDistributedSmartLoggerSafetyBox"

var _DeviceTypeMap = map[DeviceType]string{
	DeviceTypeStringInverter:         _DeviceTypeName[0:14],
	DeviceTypeSmartLogger:            _DeviceTypeName[14:25],
	DeviceTypeTransformer:            _DeviceTypeName[25:36],
	DeviceTypeEMI:                    _DeviceTypeName[36:39],
	DeviceTypeProtocolConverter:      _DeviceTypeName[39:56],
	DeviceTypeGeneralDevice:          _DeviceTypeName[56:69],
	DeviceTypeGridMeter:              _DeviceTypeName[69:78],
	DeviceTypePID:                    _DeviceTypeName[78:81],
	DeviceTypePinnetDataLogger:       _DeviceTypeName[81:97],
	DeviceTypeResidentialInverter:    _DeviceTypeName[97:116],
	DeviceTypeBattery:                _DeviceTypeName[116:123],
	DeviceTypeBackupBox:              _DeviceTypeName[123:132],
	DeviceTypePLC:                    _DeviceTypeName[132:135],
	DeviceTypeOptimizer:              _DeviceTypeName[135:144],
	DeviceTypePowerSensor:            _DeviceTypeName[144:155],
	DeviceTypeDongle:                 _DeviceTypeName[155:161],
	DeviceTypeDistributedSmartLogger: _DeviceTypeName[161:183],
	DeviceTypeSafetyBox:              _DeviceTypeName[183:192],
}

// String implements the Stringer interface.
func (x DeviceType) String() string {
	if str, ok := _DeviceTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DeviceType(%d)", x)
}

var _DeviceTypeValue = map[string]DeviceType{
	_DeviceTypeName[0:14]:                     DeviceTypeStringInverter,
	strings.ToLower(_DeviceTypeName[0:14]):    DeviceTypeStringInverter,
	_DeviceTypeName[14:25]:                    DeviceTypeSmartLogger,
	strings.ToLower(_DeviceTypeName[14:25]):   DeviceTypeSmartLogger,
	_DeviceTypeName[25:36]:                    DeviceTypeTransformer,
	strings.ToLower(_DeviceTypeName[25:36]):   DeviceTypeTransformer,
	_DeviceTypeName[36:39]:                    DeviceTypeEMI,
	strings.ToLower(_DeviceTypeName[36:39]):   DeviceTypeEMI,
	_DeviceTypeName[39:56]:                    DeviceTypeProtocolConverter,
	strings.ToLower(_DeviceTypeName[39:56]):   DeviceTypeProtocolConverter,
	_DeviceTypeName[56:69]:                    DeviceTypeGeneralDevice,
	strings.ToLower(_DeviceTypeName[56:69]):   DeviceTypeGeneralDevice,
	_DeviceTypeName[69:78]:                    DeviceTypeGridMeter,
	strings.ToLower(_DeviceTypeName[69:78]):   DeviceTypeGridMeter,
	_DeviceTypeName[78:81]:                    DeviceTypePID,
	strings.ToLower(_DeviceTypeName[78:81]):   DeviceTypePID,
	_DeviceTypeName[81:97]:                    DeviceTypePinnetDataLogger,
	strings.ToLower(_DeviceTypeName[81:97]):   DeviceTypePinnetDataLogger,
	_DeviceTypeName[97:116]:                   DeviceTypeResidentialInverter,
	strings.ToLower(_DeviceTypeName[97:116]):  DeviceTypeResidentialInverter,
	_DeviceTypeName[116:123]:                  DeviceTypeBattery,
	strings.ToLower(_DeviceTypeName[116:123]): DeviceTypeBattery,
	_DeviceTypeName[123:132]:                  DeviceTypeBackupBox,
	strings.ToLower(_DeviceTypeName[123:132]): DeviceTypeBackupBox,
	_DeviceTypeName[132:135]:                  DeviceTypePLC,
	strings.ToLower(_DeviceTypeName[132:135]): DeviceTypePLC,
	_DeviceTypeName[135:144]:                  DeviceTypeOptimizer,
	strings.ToLower(_DeviceTypeName[135:144]): DeviceTypeOptimizer,
	_DeviceTypeName[144:155]:                  DeviceTypePowerSensor,
	strings.ToLower(_DeviceTypeName[144:155]): DeviceTypePowerSensor,
	_DeviceTypeName[155:161]:                  DeviceTypeDongle,
	strings.ToLower(_DeviceTypeName[155:161]): DeviceTypeDongle,
	_DeviceTypeName[161:183]:                  DeviceTypeDistributedSmartLogger,
	strings.ToLower(_DeviceTypeName[161:183]): DeviceTypeDistributedSmartLogger,
	_DeviceTypeName[183:192]:                  DeviceTypeSafetyBox,
	strings.ToLower(_DeviceTypeName[183:192]): DeviceTypeSafetyBox,
}

// ParseDeviceType attempts to convert a string to a DeviceType.
func ParseDeviceType(name string) (DeviceType, error) {
	if x, ok := _DeviceTypeValue[name]; ok {
		return x, nil
	}
	return DeviceType(0), fmt.Errorf("%s is not a valid DeviceType", name)
}

// MarshalText implements the text marshaller method.
func (x DeviceType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DeviceType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDeviceType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x DeviceType) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *DeviceType) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = DeviceType(tmp)
	return nil
}

const (
	// InverterRunStatusDisconnected is a InverterRunStatus of type Disconnected.
	InverterRunStatusDisconnected InverterRunStatus = iota
	// InverterRunStatusConnected is a InverterRunStatus of type Connected.
	InverterRunStatusConnected
)

const _InverterRunStatusName = "DisconnectedConnected"

var _InverterRunStatusMap = map[InverterRunStatus]string{
	InverterRunStatusDisconnected: _InverterRunStatusName[0:12],
	InverterRunStatusConnected:    _InverterRunStatusName[12:21],
}

// String implements the Stringer interface.
func (x InverterRunStatus) String() string {
	if str, ok := _InverterRunStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InverterRunStatus(%d)", x)
}

var _InverterRunStatusValue = map[string]InverterRunStatus{
	_InverterRunStatusName[0:12]:                   InverterRunStatusDisconnected,
	strings.ToLower(_InverterRunStatusName[0:12]):  InverterRunStatusDisconnected,
	_InverterRunStatusName[12:21]:                  InverterRunStatusConnected,
	strings.ToLower(_InverterRunStatusName[12:21]): InverterRunStatusConnected,
}

// ParseInverterRunStatus attempts to convert a string to a InverterRunStatus.
func ParseInverterRunStatus(name string) (InverterRunStatus, error) {
	if x, ok := _InverterRunStatusValue[name]; ok {
		return x, nil
	}
	return InverterRunStatus(0), fmt.Errorf("%s is not a valid InverterRunStatus", name)
}

// MarshalText implements the text marshaller method.
func (x InverterRunStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *InverterRunStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseInverterRunStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x InverterRunStatus) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *InverterRunStatus) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = InverterRunStatus(tmp)
	return nil
}

const (
	// InverterStatusStandbyInitializing is a InverterStatus of type StandbyInitializing.
	InverterStatusStandbyInitializing InverterStatus = iota
	// InverterStatusStandbyInsulationResistanceDetection is a InverterStatus of type StandbyInsulationResistanceDetection.
	InverterStatusStandbyInsulationResistanceDetection
	// InverterStatusStandbySunlightDetection is a InverterStatus of type StandbySunlightDetection.
	InverterStatusStandbySunlightDetection
	// InverterStatusStandyPowerGridDetection is a InverterStatus of type StandyPowerGridDetection.
	InverterStatusStandyPowerGridDetection
	// InverterStatusStart is a InverterStatus of type Start.
	InverterStatusStart InverterStatus = iota + 252
	// InverterStatusGridConnection is a InverterStatus of type GridConnection.
	InverterStatusGridConnection InverterStatus = iota + 507
	// InverterStatusGridConnectionLimitedPower is a InverterStatus of type GridConnectionLimitedPower.
	InverterStatusGridConnectionLimitedPower
	// InverterStatusGridConnectionSelfDerating is a InverterStatus of type GridConnectionSelfDerating.
	InverterStatusGridConnectionSelfDerating
	// InverterStatusShutdownUnexpected is a InverterStatus of type ShutdownUnexpected.
	InverterStatusShutdownUnexpected InverterStatus = iota + 760
	// InverterStatusShutdownCommandedShutdown is a InverterStatus of type ShutdownCommandedShutdown.
	InverterStatusShutdownCommandedShutdown
	// InverterStatusShutdownOVGR is a InverterStatus of type ShutdownOVGR.
	InverterStatusShutdownOVGR
	// InverterStatusShutdownCommunicationDisconnection is a InverterStatus of type ShutdownCommunicationDisconnection.
	InverterStatusShutdownCommunicationDisconnection
	// InverterStatusShutdownLimitedPower is a InverterStatus of type ShutdownLimitedPower.
	InverterStatusShutdownLimitedPower
	// InverterStatusShutdownManualStartupRequired is a InverterStatus of type ShutdownManualStartupRequired.
	InverterStatusShutdownManualStartupRequired
	// InverterStatusShutdownDCSwitchDisconnected is a InverterStatus of type ShutdownDCSwitchDisconnected.
	InverterStatusShutdownDCSwitchDisconnected
	// InverterStatusGridSchedulingCosPhiPCurve is a InverterStatus of type GridSchedulingCosPhiPCurve.
	InverterStatusGridSchedulingCosPhiPCurve InverterStatus = iota + 1010
	// InverterStatusGridSchedulingQUCurve is a InverterStatus of type GridSchedulingQUCurve.
	InverterStatusGridSchedulingQUCurve
	// InverterStatusSpotCheckReady is a InverterStatus of type SpotCheckReady.
	InverterStatusSpotCheckReady InverterStatus = iota + 1263
	// InverterStatusSpotChecking is a InverterStatus of type SpotChecking.
	InverterStatusSpotChecking
	// InverterStatusInspecting is a InverterStatus of type Inspecting.
	InverterStatusInspecting InverterStatus = iota + 1517
	// InverterStatusAFCISelfCheck is a InverterStatus of type AFCISelfCheck.
	InverterStatusAFCISelfCheck InverterStatus = iota + 1772
	// InverterStatusIVScanning is a InverterStatus of type IVScanning.
	InverterStatusIVScanning InverterStatus = iota + 2027
	// InverterStatusDCInputDetection is a InverterStatus of type DCInputDetection.
	InverterStatusDCInputDetection InverterStatus = iota + 2282
	// InverterStatusStandbyNoSunlight is a InverterStatus of type StandbyNoSunlight.
	InverterStatusStandbyNoSunlight InverterStatus = iota + 40937
	// InverterStatusCommunicationDisconnection is a InverterStatus of type CommunicationDisconnection.
	InverterStatusCommunicationDisconnection InverterStatus = iota + 45032
	// InverterStatusLoading is a InverterStatus of type Loading.
	InverterStatusLoading InverterStatus = iota + 49127
)

const _InverterStatusName = "StandbyInitializingStandbyInsulationResistanceDetectionStandbySunlightDetectionStandyPowerGridDetectionStartGridConnectionGridConnectionLimitedPowerGridConnectionSelfDeratingShutdownUnexpectedShutdownCommandedShutdownShutdownOVGRShutdownCommunicationDisconnectionShutdownLimitedPowerShutdownManualStartupRequiredShutdownDCSwitchDisconnectedGridSchedulingCosPhiPCurveGridSchedulingQUCurveSpotCheckReadySpotCheckingInspectingAFCISelfCheckIVScanningDCInputDetectionStandbyNoSunlightCommunicationDisconnectionLoading"

var _InverterStatusMap = map[InverterStatus]string{
	InverterStatusStandbyInitializing:                  _InverterStatusName[0:19],
	InverterStatusStandbyInsulationResistanceDetection: _InverterStatusName[19:55],
	InverterStatusStandbySunlightDetection:             _InverterStatusName[55:79],
	InverterStatusStandyPowerGridDetection:             _InverterStatusName[79:103],
	InverterStatusStart:                                _InverterStatusName[103:108],
	InverterStatusGridConnection:                       _InverterStatusName[108:122],
	InverterStatusGridConnectionLimitedPower:           _InverterStatusName[122:148],
	InverterStatusGridConnectionSelfDerating:           _InverterStatusName[148:174],
	InverterStatusShutdownUnexpected:                   _InverterStatusName[174:192],
	InverterStatusShutdownCommandedShutdown:            _InverterStatusName[192:217],
	InverterStatusShutdownOVGR:                         _InverterStatusName[217:229],
	InverterStatusShutdownCommunicationDisconnection:   _InverterStatusName[229:263],
	InverterStatusShutdownLimitedPower:                 _InverterStatusName[263:283],
	InverterStatusShutdownManualStartupRequired:        _InverterStatusName[283:312],
	InverterStatusShutdownDCSwitchDisconnected:         _InverterStatusName[312:340],
	InverterStatusGridSchedulingCosPhiPCurve:           _InverterStatusName[340:366],
	InverterStatusGridSchedulingQUCurve:                _InverterStatusName[366:387],
	InverterStatusSpotCheckReady:                       _InverterStatusName[387:401],
	InverterStatusSpotChecking:                         _InverterStatusName[401:413],
	InverterStatusInspecting:                           _InverterStatusName[413:423],
	InverterStatusAFCISelfCheck:                        _InverterStatusName[423:436],
	InverterStatusIVScanning:                           _InverterStatusName[436:446],
	InverterStatusDCInputDetection:                     _InverterStatusName[446:462],
	InverterStatusStandbyNoSunlight:                    _InverterStatusName[462:479],
	InverterStatusCommunicationDisconnection:           _InverterStatusName[479:505],
	InverterStatusLoading:                              _InverterStatusName[505:512],
}

// String implements the Stringer interface.
func (x InverterStatus) String() string {
	if str, ok := _InverterStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InverterStatus(%f)", x)
}

var _InverterStatusValue = map[string]InverterStatus{
	_InverterStatusName[0:19]:                     InverterStatusStandbyInitializing,
	strings.ToLower(_InverterStatusName[0:19]):    InverterStatusStandbyInitializing,
	_InverterStatusName[19:55]:                    InverterStatusStandbyInsulationResistanceDetection,
	strings.ToLower(_InverterStatusName[19:55]):   InverterStatusStandbyInsulationResistanceDetection,
	_InverterStatusName[55:79]:                    InverterStatusStandbySunlightDetection,
	strings.ToLower(_InverterStatusName[55:79]):   InverterStatusStandbySunlightDetection,
	_InverterStatusName[79:103]:                   InverterStatusStandyPowerGridDetection,
	strings.ToLower(_InverterStatusName[79:103]):  InverterStatusStandyPowerGridDetection,
	_InverterStatusName[103:108]:                  InverterStatusStart,
	strings.ToLower(_InverterStatusName[103:108]): InverterStatusStart,
	_InverterStatusName[108:122]:                  InverterStatusGridConnection,
	strings.ToLower(_InverterStatusName[108:122]): InverterStatusGridConnection,
	_InverterStatusName[122:148]:                  InverterStatusGridConnectionLimitedPower,
	strings.ToLower(_InverterStatusName[122:148]): InverterStatusGridConnectionLimitedPower,
	_InverterStatusName[148:174]:                  InverterStatusGridConnectionSelfDerating,
	strings.ToLower(_InverterStatusName[148:174]): InverterStatusGridConnectionSelfDerating,
	_InverterStatusName[174:192]:                  InverterStatusShutdownUnexpected,
	strings.ToLower(_InverterStatusName[174:192]): InverterStatusShutdownUnexpected,
	_InverterStatusName[192:217]:                  InverterStatusShutdownCommandedShutdown,
	strings.ToLower(_InverterStatusName[192:217]): InverterStatusShutdownCommandedShutdown,
	_InverterStatusName[217:229]:                  InverterStatusShutdownOVGR,
	strings.ToLower(_InverterStatusName[217:229]): InverterStatusShutdownOVGR,
	_InverterStatusName[229:263]:                  InverterStatusShutdownCommunicationDisconnection,
	strings.ToLower(_InverterStatusName[229:263]): InverterStatusShutdownCommunicationDisconnection,
	_InverterStatusName[263:283]:                  InverterStatusShutdownLimitedPower,
	strings.ToLower(_InverterStatusName[263:283]): InverterStatusShutdownLimitedPower,
	_InverterStatusName[283:312]:                  InverterStatusShutdownManualStartupRequired,
	strings.ToLower(_InverterStatusName[283:312]): InverterStatusShutdownManualStartupRequired,
	_InverterStatusName[312:340]:                  InverterStatusShutdownDCSwitchDisconnected,
	strings.ToLower(_InverterStatusName[312:340]): InverterStatusShutdownDCSwitchDisconnected,
	_InverterStatusName[340:366]:                  InverterStatusGridSchedulingCosPhiPCurve,
	strings.ToLower(_InverterStatusName[340:366]): InverterStatusGridSchedulingCosPhiPCurve,
	_InverterStatusName[366:387]:                  InverterStatusGridSchedulingQUCurve,
	strings.ToLower(_InverterStatusName[366:387]): InverterStatusGridSchedulingQUCurve,
	_InverterStatusName[387:401]:                  InverterStatusSpotCheckReady,
	strings.ToLower(_InverterStatusName[387:401]): InverterStatusSpotCheckReady,
	_InverterStatusName[401:413]:                  InverterStatusSpotChecking,
	strings.ToLower(_InverterStatusName[401:413]): InverterStatusSpotChecking,
	_InverterStatusName[413:423]:                  InverterStatusInspecting,
	strings.ToLower(_InverterStatusName[413:423]): InverterStatusInspecting,
	_InverterStatusName[423:436]:                  InverterStatusAFCISelfCheck,
	strings.ToLower(_InverterStatusName[423:436]): InverterStatusAFCISelfCheck,
	_InverterStatusName[436:446]:                  InverterStatusIVScanning,
	strings.ToLower(_InverterStatusName[436:446]): InverterStatusIVScanning,
	_InverterStatusName[446:462]:                  InverterStatusDCInputDetection,
	strings.ToLower(_InverterStatusName[446:462]): InverterStatusDCInputDetection,
	_InverterStatusName[462:479]:                  InverterStatusStandbyNoSunlight,
	strings.ToLower(_InverterStatusName[462:479]): InverterStatusStandbyNoSunlight,
	_InverterStatusName[479:505]:                  InverterStatusCommunicationDisconnection,
	strings.ToLower(_InverterStatusName[479:505]): InverterStatusCommunicationDisconnection,
	_InverterStatusName[505:512]:                  InverterStatusLoading,
	strings.ToLower(_InverterStatusName[505:512]): InverterStatusLoading,
}

// ParseInverterStatus attempts to convert a string to a InverterStatus.
func ParseInverterStatus(name string) (InverterStatus, error) {
	if x, ok := _InverterStatusValue[name]; ok {
		return x, nil
	}
	return InverterStatus(0), fmt.Errorf("%s is not a valid InverterStatus", name)
}

// MarshalText implements the text marshaller method.
func (x InverterStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *InverterStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseInverterStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x InverterStatus) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *InverterStatus) UnmarshalJSON(data []byte) error {
	var tmp float64
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = InverterStatus(tmp)
	return nil
}

const (
	// PlantAIDTypePovertyAlleviationPlant is a PlantAIDType of type PovertyAlleviationPlant.
	PlantAIDTypePovertyAlleviationPlant PlantAIDType = iota
	// PlantAIDTypeNonPovertyAlleviationPlant is a PlantAIDType of type NonPovertyAlleviationPlant.
	PlantAIDTypeNonPovertyAlleviationPlant
)

const _PlantAIDTypeName = "PovertyAlleviationPlantNonPovertyAlleviationPlant"

var _PlantAIDTypeMap = map[PlantAIDType]string{
	PlantAIDTypePovertyAlleviationPlant:    _PlantAIDTypeName[0:23],
	PlantAIDTypeNonPovertyAlleviationPlant: _PlantAIDTypeName[23:49],
}

// String implements the Stringer interface.
func (x PlantAIDType) String() string {
	if str, ok := _PlantAIDTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PlantAIDType(%d)", x)
}

var _PlantAIDTypeValue = map[string]PlantAIDType{
	_PlantAIDTypeName[0:23]:                   PlantAIDTypePovertyAlleviationPlant,
	strings.ToLower(_PlantAIDTypeName[0:23]):  PlantAIDTypePovertyAlleviationPlant,
	_PlantAIDTypeName[23:49]:                  PlantAIDTypeNonPovertyAlleviationPlant,
	strings.ToLower(_PlantAIDTypeName[23:49]): PlantAIDTypeNonPovertyAlleviationPlant,
}

// ParsePlantAIDType attempts to convert a string to a PlantAIDType.
func ParsePlantAIDType(name string) (PlantAIDType, error) {
	if x, ok := _PlantAIDTypeValue[name]; ok {
		return x, nil
	}
	return PlantAIDType(0), fmt.Errorf("%s is not a valid PlantAIDType", name)
}

// MarshalText implements the text marshaller method.
func (x PlantAIDType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PlantAIDType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePlantAIDType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x PlantAIDType) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *PlantAIDType) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = PlantAIDType(tmp)
	return nil
}

const (
	// PlantBuildStatusNotConstructed is a PlantBuildStatus of type NotConstructed.
	PlantBuildStatusNotConstructed PlantBuildStatus = iota
	// PlantBuildStatusUnderConstruction is a PlantBuildStatus of type UnderConstruction.
	PlantBuildStatusUnderConstruction
	// PlantBuildStatusGridConnected is a PlantBuildStatus of type GridConnected.
	PlantBuildStatusGridConnected
)

const _PlantBuildStatusName = "NotConstructedUnderConstructionGridConnected"

var _PlantBuildStatusMap = map[PlantBuildStatus]string{
	PlantBuildStatusNotConstructed:    _PlantBuildStatusName[0:14],
	PlantBuildStatusUnderConstruction: _PlantBuildStatusName[14:31],
	PlantBuildStatusGridConnected:     _PlantBuildStatusName[31:44],
}

// String implements the Stringer interface.
func (x PlantBuildStatus) String() string {
	if str, ok := _PlantBuildStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PlantBuildStatus(%d)", x)
}

var _PlantBuildStatusValue = map[string]PlantBuildStatus{
	_PlantBuildStatusName[0:14]:                   PlantBuildStatusNotConstructed,
	strings.ToLower(_PlantBuildStatusName[0:14]):  PlantBuildStatusNotConstructed,
	_PlantBuildStatusName[14:31]:                  PlantBuildStatusUnderConstruction,
	strings.ToLower(_PlantBuildStatusName[14:31]): PlantBuildStatusUnderConstruction,
	_PlantBuildStatusName[31:44]:                  PlantBuildStatusGridConnected,
	strings.ToLower(_PlantBuildStatusName[31:44]): PlantBuildStatusGridConnected,
}

// ParsePlantBuildStatus attempts to convert a string to a PlantBuildStatus.
func ParsePlantBuildStatus(name string) (PlantBuildStatus, error) {
	if x, ok := _PlantBuildStatusValue[name]; ok {
		return x, nil
	}
	return PlantBuildStatus(0), fmt.Errorf("%s is not a valid PlantBuildStatus", name)
}

// MarshalText implements the text marshaller method.
func (x PlantBuildStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PlantBuildStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePlantBuildStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x PlantBuildStatus) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *PlantBuildStatus) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = PlantBuildStatus(tmp)
	return nil
}

const (
	// PlantGridConnectionTypeUtility is a PlantGridConnectionType of type Utility.
	PlantGridConnectionTypeUtility PlantGridConnectionType = iota + 1
	// PlantGridConnectionTypeCommercialAndIndustrial is a PlantGridConnectionType of type CommercialAndIndustrial.
	PlantGridConnectionTypeCommercialAndIndustrial
	// PlantGridConnectionTypeResidential is a PlantGridConnectionType of type Residential.
	PlantGridConnectionTypeResidential
)

const _PlantGridConnectionTypeName = "UtilityCommercialAndIndustrialResidential"

var _PlantGridConnectionTypeMap = map[PlantGridConnectionType]string{
	PlantGridConnectionTypeUtility:                 _PlantGridConnectionTypeName[0:7],
	PlantGridConnectionTypeCommercialAndIndustrial: _PlantGridConnectionTypeName[7:30],
	PlantGridConnectionTypeResidential:             _PlantGridConnectionTypeName[30:41],
}

// String implements the Stringer interface.
func (x PlantGridConnectionType) String() string {
	if str, ok := _PlantGridConnectionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PlantGridConnectionType(%d)", x)
}

var _PlantGridConnectionTypeValue = map[string]PlantGridConnectionType{
	_PlantGridConnectionTypeName[0:7]:                    PlantGridConnectionTypeUtility,
	strings.ToLower(_PlantGridConnectionTypeName[0:7]):   PlantGridConnectionTypeUtility,
	_PlantGridConnectionTypeName[7:30]:                   PlantGridConnectionTypeCommercialAndIndustrial,
	strings.ToLower(_PlantGridConnectionTypeName[7:30]):  PlantGridConnectionTypeCommercialAndIndustrial,
	_PlantGridConnectionTypeName[30:41]:                  PlantGridConnectionTypeResidential,
	strings.ToLower(_PlantGridConnectionTypeName[30:41]): PlantGridConnectionTypeResidential,
}

// ParsePlantGridConnectionType attempts to convert a string to a PlantGridConnectionType.
func ParsePlantGridConnectionType(name string) (PlantGridConnectionType, error) {
	if x, ok := _PlantGridConnectionTypeValue[name]; ok {
		return x, nil
	}
	return PlantGridConnectionType(0), fmt.Errorf("%s is not a valid PlantGridConnectionType", name)
}

// MarshalText implements the text marshaller method.
func (x PlantGridConnectionType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PlantGridConnectionType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePlantGridConnectionType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x PlantGridConnectionType) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *PlantGridConnectionType) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = PlantGridConnectionType(tmp)
	return nil
}

const (
	// PlantStatusDisconnected is a PlantStatus of type Disconnected.
	PlantStatusDisconnected PlantStatus = iota + 1
	// PlantStatusFaulty is a PlantStatus of type Faulty.
	PlantStatusFaulty
	// PlantStatusHealthy is a PlantStatus of type Healthy.
	PlantStatusHealthy
)

const _PlantStatusName = "DisconnectedFaultyHealthy"

var _PlantStatusMap = map[PlantStatus]string{
	PlantStatusDisconnected: _PlantStatusName[0:12],
	PlantStatusFaulty:       _PlantStatusName[12:18],
	PlantStatusHealthy:      _PlantStatusName[18:25],
}

// String implements the Stringer interface.
func (x PlantStatus) String() string {
	if str, ok := _PlantStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PlantStatus(%d)", x)
}

var _PlantStatusValue = map[string]PlantStatus{
	_PlantStatusName[0:12]:                   PlantStatusDisconnected,
	strings.ToLower(_PlantStatusName[0:12]):  PlantStatusDisconnected,
	_PlantStatusName[12:18]:                  PlantStatusFaulty,
	strings.ToLower(_PlantStatusName[12:18]): PlantStatusFaulty,
	_PlantStatusName[18:25]:                  PlantStatusHealthy,
	strings.ToLower(_PlantStatusName[18:25]): PlantStatusHealthy,
}

// ParsePlantStatus attempts to convert a string to a PlantStatus.
func ParsePlantStatus(name string) (PlantStatus, error) {
	if x, ok := _PlantStatusValue[name]; ok {
		return x, nil
	}
	return PlantStatus(0), fmt.Errorf("%s is not a valid PlantStatus", name)
}

// MarshalText implements the text marshaller method.
func (x PlantStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PlantStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePlantStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalJSON implements the JSON marshaller method.
func (x PlantStatus) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(x))), nil
}

// UnmarshalJSON implements the JSON unmarshaller method.
func (x *PlantStatus) UnmarshalJSON(data []byte) error {
	var tmp int
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	*x = PlantStatus(tmp)
	return nil
}
